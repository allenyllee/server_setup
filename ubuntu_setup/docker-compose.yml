version: '2.3'

# 
# tamplate
#   service:
#       name:
#           build:
#           container_name:
#           image:
#           ports:
#           volumes:
#           environment:
#           networks:
#           .............
#           restart: always
# 


#
# run services
# 
services:
    watchtower:
        container_name: watchtower
        image: v2tec/watchtower
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            - WATCHTOWER_NOTIFICATIONS=email
            - WATCHTOWER_NOTIFICATION_EMAIL_FROM=allen7575@gmail.com
            - WATCHTOWER_NOTIFICATION_EMAIL_TO=allen7575@gmail.com
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=allen7575@gmail.com
            - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=password
        restart: always
        command: --cleanup --schedule "0 0 3 * * *"


    # gitlab:
    #     container_name: gitlab
    #     image: gitlab/gitlab-ce:latest
    #     ports:
    #         - "443:443"
    #         - "80:80"
    #         - "44:22"
    #     volumes:
    #         - "$GITLAB_DIR/config:/etc/gitlab"
    #         - "$GITLAB_DIR/logs:/var/log/gitlab"
    #         - "$GITLAB_DIR/data:/var/opt/gitlab"
    #     logging:
    #         options:
    #             max-size: 50m
    #     environment:
    #         - GITLAB_OMNIBUS_CONFIG=" \
    #             gitlab_rails['lfs_enabled'] = true; \
    #             gitlab_rails['gitlab_email_enabled'] = true; \
    #             gitlab_rails['gitlab_email_from'] = 'SASSD.Admin@liteon.com'; \
    #             gitlab_rails['gitlab_email_display_name'] = 'Gitlab'; \
    #             gitlab_rails['gitlab_email_reply_to'] = 'SASSD.Admin@liteon.com'; \
    #             gitlab_rails['smtp_enable'] = true; \
    #             gitlab_rails['smtp_address'] = '10.1.15.143'; \
    #             gitlab_rails['smtp_port'] = 25; \
    #             gitlab_rails['smtp_domain'] = 'liteon.com'; \
    #             gitlab_rails['smtp_authentication'] = false; \
    #             gitlab_rails['smtp_enable_starttls_auto'] = true; \
    #             gitlab_rails['smtp_tls'] = false; \
    #             gitlab_rails['smtp_openssl_verify_mode'] = 'peer'"
    #     hostname: 10.1.53.168
    #     restart: always

    # jenkins:
    #     container_name: jenkins
    #     image: jenkins/jenkins:lts
    #     ports:
    #         - "8081:8080"
    #         - "50000:50000"
    #     volumes:
    #         - "$JENKINS_DIR:/var/jenkins_home"
    #         - "/var/run/docker.sock:/var/run/docker.sock"
    #         # Invalid interpolation format for "command" option in service "node-exporter": "^/(sys|proc|dev|host|etc)($|/)" · Issue #4485 · docker/compose
    #         # https://github.com/docker/compose/issues/4485
    #         - "${DOCKERBIN}:/usr/bin/docker"
    #         - "/usr/lib/x86_64-linux-gnu/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7"
    #     restart: always

    # #
    # # run a docker registry backend container and link it to network bridge above
    # #
    # reg_server:
    #     container_name: reg_server
    #     image: registry:2
    #     ports:
    #         - "$REG_BACKENDPORT:5000"
    #     volumes:
    #         - "$REGISTRY_DIR:/var/lib/registry"
    #     networks:
    #         - reg_net
    #     restart: always

    # #
    # # run a docker registry frontend container and link it to network bridge above
    # #
    # reg_ui:
    #     container_name: reg_ui
    #     image: konradkleine/docker-registry-frontend:v2
    #     ports:
    #         - "8080:80"
    #     environment:
    #         - ENV_DOCKER_REGISTRY_HOST=reg_server
    #         - ENV_DOCKER_REGISTRY_PORT=$REG_BACKENDPORT
    #     networks:
    #         - reg_net
    #     restart: always

    portainer:
        container_name: portainer
        image: portainer/portainer
        ports:
            - "9000:9000"
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
            - "portainer_data:/data portainer/portainer"
        restart: always

    # squid:
    #     container_name: squid
    #     image: sameersbn/squid:latest
    #     ports:
    #         - "3128:3128"
    #     volumes:
    #         - "$SQUID_DIR:/var/spool/squid3"
    #     logging:
    #         options:
    #             max-size: 50m
    #     restart: always

    samba:
        container_name: samba
        image: dperson/samba
        ports:
            - "139:139"
            - "445:445"
        volumes:
            - "$SAMBA_DIR_SSD:/data_ssd"
            - "$SAMBA_DIR:/data"
        environment:
            - USERID=0
            - GROUPID=0
        command: -S -s "proj_data_ssd;/data_ssd;yes;no" -s "proj_data;/data;yes;no"
        restart: always

    ResilioSync:
        container_name: ResilioSync
        image: resilio/sync
        ports:
            - "8888:8888"
            - "55555:55555"
        volumes:
            - "$SYNC_CONFIG:/mnt/sync"
            - "$SYNC_DATA:/mnt/sync/ResilioSyncFolder"
        logging:
            options:
                max-size: 50m
        entrypoint:
            - /mnt/sync/init_script.sh
        command: --config /mnt/sync/sync.conf
        restart: always

    # 2019/08/05 update to latest version
    # abraunegg/onedrive: Free Client for OneDrive on Linux
    # https://github.com/abraunegg/onedrive
    # 
    OneDrive:
        container_name: OneDrive
        image: driveone/onedrive
        environment:
            - PUID=$UserID
            - PGID=$GroupID
            - TZ=Asia/Taipei
            - DEBUG=0
        logging:
            options:
                max-size: 50m
        volumes:
            - $ONEDRIVE_CONFIG:/onedrive/conf
            - $ONEDRIVE_DATA:/onedrive/data
        restart: always


    # GoogleDrive:
    #     container_name: GoogleDrive
    #     image: retrohunter/docker-google-drive-ocamlfuse
    #     user: root:root
    #     security_opt:
    #         - apparmor:unconfined
    #     cap_add:
    #         - mknod
    #         - sys_admin
    #     devices:
    #         - "/dev/fuse:/dev/fuse"
    #     volumes:
    #         - $GOOGLEDRIVE_DATA:/mnt/google-drive:shared
    #         - $GOOGLEDRIVE_CONFIG:/root/.gdfuse/default
    #     entrypoint:
    #         - /root/.gdfuse/default/docker-entrypoint.sh
    #     restart: always

    ODrive:
        container_name: ODrive
        image: allenyllee/odrive
        user: guest:guest
        environment:
            - DISPLAY=$DISPLAY
            - XAUTHORITY=$XAUTH
        runtime: nvidia
        security_opt:
            - apparmor:unconfined
        cap_add:
            - sys_admin
        devices:
            - "/dev/fuse:/dev/fuse"
        volumes:
            - $ODRIVE_DATA:/ODrive
            - $ODRIVE_CONFIG:/home/guest/.config/odrive
            - $XSOCK:$XSOCK
            - $XAUTH_DIR:$XAUTH_DIR
        logging:
            options:
                max-size: 50m
        entrypoint:
            - /scripts/init.sh
        restart: always

    Dropbox:
        container_name: Dropbox
        image: janeczku/dropbox
        environment:
            - DBOX_UID=$UserID
            - DBOX_GID=$GroupID
        network_mode: "host"
        volumes:
            - $DROPBOX_DATA:/dbox/Dropbox
            - $DROPBOX_CONFIG:/dbox/.dropbox
        logging:
            options:
                max-size: 50m
        privileged: true
        entrypoint:
            - /dbox/.dropbox/run.sh
        restart: always

# Compose file version 2 reference | Docker Documentation
# https://docs.docker.com/compose/compose-file/compose-file-v2/#cpu-and-other-resources
# Note: The following options were added in version 2.2: 
# cpu_count, cpu_percent, cpus. The following options were 
# added in version 2.1: oom_kill_disable, cpu_period

    WebStorage:
        container_name: WebStorage
        image: allenyllee/webstorage-wine
        cpus: '0.05'
        environment:
            - DISPLAY=$DISPLAY
            - XAUTHORITY=$XAUTH
        volumes:
            - $WebStorage_DATA:/WebStorage
            - $WebStorage_CONFIG:/root/.wine
            - $XSOCK:$XSOCK
            - $XAUTH_DIR:$XAUTH_DIR
        logging:
            options:
                max-size: 50m
        entrypoint:
            - /init/run_webstorage.sh
        restart: always


    BaiduYun:
        container_name: BaiduYun
        image: allenyllee/baiduyun-wine
        environment:
            - DISPLAY=$DISPLAY
            - XAUTHORITY=$XAUTH
        volumes:
            - $BaiduYun_DATA:/baidubox
            - $BaiduYun_CONFIG:/root/.wine
            - $XSOCK:$XSOCK
            - $XAUTH_DIR:$XAUTH_DIR
        entrypoint:
            - /init/run_baiduyun.sh
        restart: always

    Deluge:
        container_name: Deluge
        image: linuxserver/deluge
        environment:
            - PUID=$UserID
            - PGID=$GroupID
            - TZ=Asia/Taipei
            - UMASK_SET=000
            - DISPLAY=$DISPLAY
            - XAUTHORITY=$XAUTH
        network_mode: "host"
        logging:
            options:
                max-size: 50m
        volumes:
            - $DELUGE_DATA:/downloads
            - $DELUGE_DATA2:/downloads2
            - $DELUGE_TEMP:/temps
            - $DELUGE_CONFIG:/config
            - $XSOCK:$XSOCK
            - $XAUTH_DIR:$XAUTH_DIR
        restart: always


    # xtensa:
    #     build:
    #         context: $XTENSA_GIT
    #         dockerfile: Dockerfile
    #     container_name: xtensa
    #     image: xtensa/xplorer:7.0.4
    #     ports:
    #         - "3322:22"
    #     volumes:
    #         - "/tmp/.X11-unix:/tmp/.X11-unix"
    #         - "$XTENSA_DIR:/home/project"
    #         - "xtensa:/home/xtensa"
    #     environment:
    #         - DISPLAY=$DISPLAY
    #     stdin_open: true
    #     tty: true
    #     command: bash -c "service sshd start;bash"
    #     restart: always


networks:
    reg_net:
        driver: bridge

volumes:
    xtensa:
    portainer_data:
